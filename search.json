[{"path":"https://jakubsob.github.io/cucumber/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 cucumber authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jakubsob.github.io/cucumber/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jakub Sobolewski. Author, maintainer.","code":""},{"path":"https://jakubsob.github.io/cucumber/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sobolewski J (2024). cucumber: Implementation Cucumber Framework R. R package version 0.0.0.9000, https://jakubsob.github.io/cucumber/, https://github.com/jakubsob/cucumber.","code":"@Manual{,   title = {cucumber: An Implementation Of Cucumber Framework For R},   author = {Jakub Sobolewski},   year = {2024},   note = {R package version 0.0.0.9000, https://jakubsob.github.io/cucumber/},   url = {https://github.com/jakubsob/cucumber}, }"},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"cucumber-","dir":"","previous_headings":"","what":"Behavior-Driven Development in R","title":"Behavior-Driven Development in R","text":"implementation Cucumber testing framework R. Fully native, external dependencies. Use extension testthat tests standalone testing stage.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Behavior-Driven Development in R","text":"package parses Gherkin documents uses step definitions run tests","code":"# tests/testthat/addition.feature Feature: Addition   Scenario: Adding 2 integers     When I add 1 and 1     Then the result is 2   Scenario: Adding integer and float     When I add 1 and 1.1     Then the result is 2.1   Scenario: Adding float and float     When I add 1.1 and 1.1     Then the result is 2.2 # tests/testthat/steps/steps_definitions.R when(\"I add {int} and {int}\", function(x, y, context) {   context$result <- x + y })  then(\"the result is {int}\", function(expected, context) {   expect_equal(context$result, expected) })  when(\"I add {int} and {float}\", function(x, y, context) {   context$result <- x + y })  when(\"I add {float} and {float}\", function(x, y, context) {   context$result <- x + y })  then(\"the result is {float}\", function(expected, context) {   expect_equal(context$result, expected) })"},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"running-cucumber-tests-with-testthat-tests","dir":"","previous_headings":"Introduction","what":"Running cucumber tests with testthat tests.","title":"Behavior-Driven Development in R","text":"run cucumber part testthat suite, create test-cucumber.R file: run: - testthat::test_dir(\"tests/testthat\"), - testthat::test_file(\"tests/testthat/test-cucumber.R\"), - devtools::test(), use testthat reporter show results. building blocks cucumber tests Features Scenarios. - Feature treated separate context – results reported test-*.R files, e.g. 'test-Feature: Addition.R'. - Scenario equivalent testthat::test_that testthat::case. get feedback Scenario separately. steps scenario successful, scenario considered successful. means succesful run Addition feature produce following output (ProgressReporter). doesn’t succeed, report Scenarios failed Feature.","code":"#' tests/testthat/test-cucumber.R cucumber::test(\".\", \"./steps\") v | F W  S  OK | Context v |          3 | Feature: Addition == Results ================================================ [ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ] v | F W  S  OK | Context x | 2        1 | Feature: Addition -------------------------------------------------------------------------------- Failure ('test-cucumber.R:1:1'): Scenario: Adding integer and float context$result (`actual`) not equal to `expected` (`expected`). `actual`: 2 `expected`: 5 Backtrace: x 1. \\-global `<step>`(expected = 5L, context = `<env>`) 2.   \\-testthat::expect_equal(context$result, expected) at ./steps/addition.R:7:2 Failure ('test-cucumber.R:1:1'): Scenario: Adding float and float context$result (`actual`) not equal to `expected` (`expected`). `actual`: 2 `expected`: 5 Backtrace: x 1. \\-global `<step>`(expected = 5L, context = `<env>`) 2.   \\-testthat::expect_equal(context$result, expected) at ./steps/addition.R:7:2 -------------------------------------------------------------------------------- == Results ===================================================================== -- Failed tests ---------------------------------------------------------------- Failure ('test-cucumber.R:1:1'): Scenario: Adding integer and float context$result (`actual`) not equal to `expected` (`expected`). `actual`: 2 `expected`: 5 Backtrace: x 1. \\-global `<step>`(expected = 5L, context = `<env>`) 2.   \\-testthat::expect_equal(context$result, expected) at ./steps/addition.R:7:2 Failure ('test-cucumber.R:1:1'): Scenario: Adding float and float context$result (`actual`) not equal to `expected` (`expected`). `actual`: 2 `expected`: 5 Backtrace: x 1. \\-global `<step>`(expected = 5L, context = `<env>`) 2.   \\-testthat::expect_equal(context$result, expected) at ./steps/addition.R:7:2 [ FAIL 1 | WARN 0 | SKIP 0 | PASS 2 ]"},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"running-cucumber-tests-separately-to-unit-tests","dir":"","previous_headings":"","what":"Running cucumber tests separately to unit tests","title":"Behavior-Driven Development in R","text":"want run cucumber tests separately, example different testing step CI, just put cucumber tests directory (use testthat::test_dir filter parameter). may especially useful, cucumber tests significantly slower unit tests. may often case cucumber tests target integration different parts system provide high level confirmation system works expected. case run cucumber tests testthat::test_dir(\"tests/cucumber\").","code":"├── tests/ │   ├── cucumber/ │   │   ├── steps/ │   │   │   ├── feature_1_steps.R │   │   │   ├── feature_2_steps.R │   │   ├── feature_1.feature │   │   ├── feature_2.feature │   │   ├── test-cucumber.R │   ├── testthat/ │   │   ├── test-unit_test_1.R │   │   ├── test-unit_test_2.R"},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Behavior-Driven Development in R","text":"See examples directory help get started.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"how-it-works","dir":"","previous_headings":"","what":"How it works","title":"Behavior-Driven Development in R","text":".feature files parsed matched step definitions. Step functions defined using: - description: cucumber expression. - implementation function. must parameters matched description context parameter - environment managing state steps. step parsed one .feature files found, error thrown.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"parameter-types","dir":"","previous_headings":"How it works","what":"Parameter types","title":"Behavior-Driven Development in R","text":"Step implementations receive data .feature files parameters. values detected via regular expressions casted transformer function. following parameter types available default: See cucumber::define_parameter_type() define parameter types.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"supported-gherkin-syntax","dir":"","previous_headings":"","what":"Supported Gherkin syntax:","title":"Behavior-Driven Development in R","text":"Feature Scenario Example Given Background Scenario Outline (Scenario Template) Examples (Scenarios) \"\"\" (Doc Strings) | (Data Tables) @ (Tags) # (Comments) See Gherkin Reference write Gherkin documents.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Behavior-Driven Development in R","text":"can install development version cucumber GitHub :","code":"devtools::install_github(\"jakubsob/cucumber\")"},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Parameter Type — define_parameter_type","title":"Define Parameter Type — define_parameter_type","text":"Add new parameter can used step definitions.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Parameter Type — define_parameter_type","text":"","code":"define_parameter_type(name, regexp, transformer)"},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Parameter Type — define_parameter_type","text":"name name parameter. regexp regular expression parameter match . Note want escape special character, need use four backslashes. transformer function transform parameter string desired type. Must funcion requires single argument.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Parameter Type — define_parameter_type","text":"object class parameter, invisibly. Function called side effects.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Parameter Type — define_parameter_type","text":"","code":"define_parameter_type(\"color\", \"red|blue|green\", as.character) define_parameter_type(   name = \"sci_number\",   regexp = \"[+-]?\\\\\\\\d*\\\\\\\\.?\\\\\\\\d+(e[+-]?\\\\\\\\d+)?\",   transform = as.double )"},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":null,"dir":"Reference","previous_headings":"","what":"Step — step","title":"Step — step","text":"implementation Cucumber steps. Make sure description unique step.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Step — step","text":"","code":"given(description, implementation)  when(description, implementation)  then(description, implementation)"},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Step — step","text":"description description step. implementation function run step executed.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Step — step","text":"function class step, invisibly. Function called side effects.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Step — step","text":"implementation function always last parameter named context. holds environment state stored. Named arguments precede context considered parameters. step description \"{int} cucumbers basket\" implementation function function(n_cucumbers, context). {int} value passed n_cucumbers, parameter can name. table docstring passed step, passed argument next inline parameters context. See inst/examples/table write implemntation uses tables docstrings.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/test.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all Cucumber tests — test","title":"Run all Cucumber tests — test","text":"command runs Cucumber tests. takes .feature files features_dir runs using steps steps_dir.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all Cucumber tests — test","text":"","code":"test(features_dir, steps_dir, steps_loader = .default_steps_loader)"},{"path":"https://jakubsob.github.io/cucumber/reference/test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all Cucumber tests — test","text":"features_dir character string directory containing feature files. steps_dir character string directory containing step files. steps_loader function loads steps implementations. default sources files steps_dir using built-mechanism. can provide function load steps. function take one argument, steps_dir return list steps.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all Cucumber tests — test","text":"None, function called side effects.","code":""},{"path":[]}]
