[{"path":"https://jakubsob.github.io/cucumber/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 cucumber authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jakubsob.github.io/cucumber/articles/how-it-works.html","id":"step-execution-order","dir":"Articles","previous_headings":"","what":"Step execution order","title":"How it works","text":"Given feature file: step definitions: order calling steps : Notice feature file uses keywords. used continue previous step. example , used continue previous Given step, ’re matched given step definition. can use continue previous steps well. Scenario run, context environment reset state doesn’t leak scenario.","code":"# tests/testthat/sum.feature Feature: Sum   Scenario: Sum should work for 2 numbers     Given I have 1     And I have 2     When I add them     Then I get 3    Scenario: Sum should work for 3 numbers     Given I have 1     And I have 2     But I have 3     When I add them     Then I get 6 # tests/testthat/steps/steps_definitions.R given(\"I have {int}\", function(int, context) {   print(\"given\")   context$numbers <- c(context$numbers, int) })  when(\"I add them\", function(context) {   print(\"when\")   context$result <- sum(context$numbers) })  then(\"I get {int}\", function(int, context) {   print(\"then\")   expect_equal(context$result, int) }) > [1] \"given\" > [1] \"given\" > [1] \"when\" > [1] \"then\" > [1] \"given\" > [1] \"given\" > [1] \"given\" > [1] \"when\" > [1] \"then\""},{"path":"https://jakubsob.github.io/cucumber/articles/how-it-works.html","id":"how-step-definitions-are-loaded","dir":"Articles","previous_headings":"","what":"How step definitions are loaded","title":"How it works","text":"don’t load step implementations manually. Cucumber loads automatically cucumber::test called. don’t want loaded automatically, can use steps_loader argument provide step loader function. See inst/examples/custom_step_loader Steps feature files matched step definitions defined cucumber::given, cucumber::, cucumber::functions using regular expressions. define step calling step functions, register step, making available tests.","code":""},{"path":"https://jakubsob.github.io/cucumber/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jakub Sobolewski. Author, maintainer.","code":""},{"path":"https://jakubsob.github.io/cucumber/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sobolewski J (2024). cucumber: Behavior-Driven Development R. R package version 1.0.4, https://jakubsob.github.io/cucumber/, https://github.com/jakubsob/cucumber.","code":"@Manual{,   title = {cucumber: Behavior-Driven Development for R},   author = {Jakub Sobolewski},   year = {2024},   note = {R package version 1.0.4, https://jakubsob.github.io/cucumber/},   url = {https://github.com/jakubsob/cucumber}, }"},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"cucumber-","dir":"","previous_headings":"","what":"Behavior-Driven Development in R","title":"Behavior-Driven Development in R","text":"implementation Cucumber testing framework R. Fully native, external dependencies. Use extension testthat tests standalone testing stage.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Behavior-Driven Development in R","text":"package parses Gherkin documents uses step definitions run tests","code":"# tests/testthat/addition.feature Feature: Addition   Scenario: Adding 2 integers     When I add 1 and 1     Then the result is 2   Scenario: Adding integer and float     When I add 1 and 1.1     Then the result is 2.1   Scenario: Adding float and float     When I add 1.1 and 1.1     Then the result is 2.2 # tests/testthat/steps/steps_definitions.R when(\"I add {int} and {int}\", function(x, y, context) {   context$result <- x + y })  then(\"the result is {int}\", function(expected, context) {   expect_equal(context$result, expected) })  when(\"I add {int} and {float}\", function(x, y, context) {   context$result <- x + y })  when(\"I add {float} and {float}\", function(x, y, context) {   context$result <- x + y })  then(\"the result is {float}\", function(expected, context) {   expect_equal(context$result, expected) })"},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"running-cucumber-tests-with-testthat-tests","dir":"","previous_headings":"Introduction","what":"Running cucumber tests with testthat tests.","title":"Behavior-Driven Development in R","text":"run cucumber part testthat suite, create test-cucumber.R file: run: - testthat::test_dir(\"tests/testthat\"), - testthat::test_file(\"tests/testthat/test-cucumber.R\"), - devtools::test(), use testthat reporter show results. building blocks cucumber tests Features Scenarios. - Feature treated separate context – results reported test-*.R files, e.g. 'test-Feature: Addition.R'. - Scenario equivalent testthat::test_that testthat::case. get feedback Scenario separately. steps scenario successful, scenario considered successful. means succesful run Addition feature produce following output (ProgressReporter). doesn’t succeed, report Scenarios failed Feature.","code":"#' tests/testthat/test-cucumber.R cucumber::test(\".\", \"./steps\") | v | F W  S  OK | Context           | | v | 3          | Feature: Addition | == Results ================================================ [ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ] | v | F W  S  OK | Context           | | x | 2        1 | Feature: Addition | -------------------------------------------------------------------------------- Failure ('test-cucumber.R:1:1'): Scenario: Adding integer and float context$result (`actual`) not equal to `expected` (`expected`). `actual`: 2 `expected`: 5 Backtrace: x 1. \\-global `<step>`(expected = 5L, context = `<env>`) 2.   \\-testthat::expect_equal(context$result, expected) at ./steps/addition.R:7:2 Failure ('test-cucumber.R:1:1'): Scenario: Adding float and float context$result (`actual`) not equal to `expected` (`expected`). `actual`: 2 `expected`: 5 Backtrace: x 1. \\-global `<step>`(expected = 5L, context = `<env>`) 2.   \\-testthat::expect_equal(context$result, expected) at ./steps/addition.R:7:2 -------------------------------------------------------------------------------- == Results ===================================================================== -- Failed tests ---------------------------------------------------------------- Failure ('test-cucumber.R:1:1'): Scenario: Adding integer and float context$result (`actual`) not equal to `expected` (`expected`). `actual`: 2 `expected`: 5 Backtrace: x 1. \\-global `<step>`(expected = 5L, context = `<env>`) 2.   \\-testthat::expect_equal(context$result, expected) at ./steps/addition.R:7:2 Failure ('test-cucumber.R:1:1'): Scenario: Adding float and float context$result (`actual`) not equal to `expected` (`expected`). `actual`: 2 `expected`: 5 Backtrace: x 1. \\-global `<step>`(expected = 5L, context = `<env>`) 2.   \\-testthat::expect_equal(context$result, expected) at ./steps/addition.R:7:2 [ FAIL 1 | WARN 0 | SKIP 0 | PASS 2 ]"},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"running-cucumber-tests-separately-to-unit-tests","dir":"","previous_headings":"","what":"Running cucumber tests separately to unit tests","title":"Behavior-Driven Development in R","text":"want run cucumber tests separately, example different testing step CI, just put cucumber tests directory (use testthat::test_dir filter parameter). may especially useful, cucumber tests significantly slower unit tests. may often case cucumber tests target integration different parts system provide high level confirmation system works expected. case run cucumber tests testthat::test_dir(\"tests/cucumber\").","code":"├── tests/ │   ├── cucumber/ │   │   ├── steps/ │   │   │   ├── feature_1_steps.R │   │   │   ├── feature_2_steps.R │   │   ├── feature_1.feature │   │   ├── feature_2.feature │   │   ├── test-cucumber.R │   ├── testthat/ │   │   ├── test-unit_test_1.R │   │   ├── test-unit_test_2.R"},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Behavior-Driven Development in R","text":"See examples directory help get started.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"how-it-works","dir":"","previous_headings":"","what":"How it works","title":"Behavior-Driven Development in R","text":".feature files parsed matched step definitions. Step functions defined using: - description: cucumber expression. - implementation function. must parameters matched description context parameter - environment managing state steps. step parsed one .feature files found, error thrown.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"parameter-types","dir":"","previous_headings":"How it works","what":"Parameter types","title":"Behavior-Driven Development in R","text":"Step implementations receive data .feature files parameters. values detected via regular expressions casted transformer function. following parameter types available default: See cucumber::define_parameter_type() define parameter types.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"supported-gherkin-syntax","dir":"","previous_headings":"","what":"Supported Gherkin syntax:","title":"Behavior-Driven Development in R","text":"Feature Scenario Example Given Background Scenario Outline (Scenario Template) Examples (Scenarios) \"\"\" (Doc Strings) | (Data Tables) @ (Tags) # (Comments) See Gherkin Reference write Gherkin documents.","code":""},{"path":"https://jakubsob.github.io/cucumber/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Behavior-Driven Development in R","text":"can install development version cucumber GitHub :","code":"devtools::install_github(\"jakubsob/cucumber\")"},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Type — define_parameter_type","title":"Parameter Type — define_parameter_type","text":"following parameter types available default: use custom parameter types, call define_parameter_type cucumber::test called.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Type — define_parameter_type","text":"","code":"define_parameter_type(name, regexp, transformer)"},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Type — define_parameter_type","text":"name name parameter. regexp regular expression parameter match . Note want escape special character, need use four backslashes. transformer function transform parameter string desired type. Must function requires single argument.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Type — define_parameter_type","text":"object class parameter, invisibly. Function called side effects.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/define_parameter_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Type — define_parameter_type","text":"","code":"define_parameter_type(\"color\", \"red|blue|green\", as.character) define_parameter_type(   name = \"sci_number\",   regexp = \"[+-]?\\\\\\\\d*\\\\\\\\.?\\\\\\\\d+(e[+-]?\\\\\\\\d+)?\",   transform = as.double )  if (FALSE) { #' tests/testthat/test-cucumber.R cucumber::define_parameter_type(\"color\", \"red|blue|green\", as.character) cucumber::test(\".\", \"./steps\") }"},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a step — step","title":"Define a step — step","text":"Provide description matches steps feature files implementation function run.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a step — step","text":"","code":"given(description, implementation)  when(description, implementation)  then(description, implementation)"},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a step — step","text":"description description step. simple version Cucumber expression. description used cucumber::test function find implementation step feature file. description can contain placeholders curly braces, e.g. \"{int} cucumbers basket\". step definition found error thrown. multiple steps definitions single step found error thrown. Make sure description unique step. implementation function run step executed. implementation function always last parameter named context. holds environment state stored passed next step. step description \"{int} cucumbers basket\" implementation function function(n_cucumbers, context). {int} value passed n_cucumbers, parameter can name. table docstring defined step, passed argument plceholder parameters context. function function(n_cucumbers, table, context). See example write implementation uses tables docstrings.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a step — step","text":"function class step, invisibly. Function called side effects.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a step — step","text":"Placeholders expressions replaced regular expressions match values feature file. regular expressions generated runtime based defined parameter types. expression \"{int} cucumbers basket\" converted \"[+-]?(?<![.])[:digit:]+(?![.]) cucumbers basket\". extracted value {int} passed implementation function transformed .integer. define parameter types use define_parameter_type.","code":""},{"path":[]},{"path":"https://jakubsob.github.io/cucumber/reference/step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a step — step","text":"","code":"given(\"I have {int} cucumbers in my basket\", function(n_cucumbers, context) {   context$n_cucumbers <- n_cucumbers })  given(\"I have {int} cucumbers in my basket and a table\", function(n_cucumbers, table, context) {   context$n_cucumbers <- n_cucumbers   context$table <- table })  when(\"I eat {int} cucumbers\", function(n_cucumbers, context) {   context$n_cucumbers <- context$n_cucumbers - n_cucumbers })  then(\"I should have {int} cucumbers in my basket\", function(n_cucumbers, context) {   expect_equal(context$n_cucumbers, n_cucumbers) })"},{"path":"https://jakubsob.github.io/cucumber/reference/test.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all Cucumber tests — test","title":"Run all Cucumber tests — test","text":"command runs Cucumber tests. takes .feature files features_dir runs using steps steps_dir.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all Cucumber tests — test","text":"","code":"test(   features_dir,   steps_dir,   steps_loader = .default_steps_loader,   test_interactive = getOption(\"cucumber.interactive\", default = FALSE) )"},{"path":"https://jakubsob.github.io/cucumber/reference/test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all Cucumber tests — test","text":"features_dir character string directory containing feature files. steps_dir character string directory containing step files. steps_loader function loads steps implementations. default sources files steps_dir using built-mechanism. can provide function load steps. function take one argument, steps_dir return list steps. test_interactive logical value indicating whether ask feature files run.","code":""},{"path":"https://jakubsob.github.io/cucumber/reference/test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all Cucumber tests — test","text":"None, function called side effects.","code":""},{"path":"https://jakubsob.github.io/cucumber/news/index.html","id":"cucumber-104","dir":"Changelog","previous_headings":"","what":"cucumber 1.0.4","title":"cucumber 1.0.4","text":"CRAN release: 2024-06-29 Added test_interactive parameter cucumber::test. allows interactively select feature files run. can useful get quicker feedback developing new features.","code":""},{"path":"https://jakubsob.github.io/cucumber/news/index.html","id":"cucumber-103","dir":"Changelog","previous_headings":"","what":"cucumber 1.0.3","title":"cucumber 1.0.3","text":"CRAN release: 2024-06-09 Fixed float detection multiple leading numbers, e.g. 11.1, +11.1, -11.1.","code":""},{"path":"https://jakubsob.github.io/cucumber/news/index.html","id":"cucumber-102","dir":"Changelog","previous_headings":"","what":"cucumber 1.0.2","title":"cucumber 1.0.2","text":"CRAN release: 2024-04-09 Fixed CRAN debian checks.","code":""},{"path":"https://jakubsob.github.io/cucumber/news/index.html","id":"cucumber-101","dir":"Changelog","previous_headings":"","what":"cucumber 1.0.1","title":"cucumber 1.0.1","text":"CRAN release: 2024-04-03 ✨ Changed {string} parameter matched. now matches text quotes. step Given {string} match Given \"foo bar\". change brings parser closer original cucumber expressions work. ✨ Added {word} parameter matches single word. step like Given {word} match Given foo. 🐛 Fix handling repeated parameters step. Now steps Given {string} {string} Given {string} match Given \"foo\" \"bar\" instead throwing error multiple step definitions found. 📝 Improved documentation parameters define_parameter_type function docs. 📝 Added example snapshot test.","code":""},{"path":"https://jakubsob.github.io/cucumber/news/index.html","id":"cucumber-100","dir":"Changelog","previous_headings":"","what":"cucumber 1.0.0","title":"cucumber 1.0.0","text":"CRAN release: 2024-03-14 First stable version 🚀","code":""}]
