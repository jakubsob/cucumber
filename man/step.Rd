% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step.R
\name{step}
\alias{step}
\alias{given}
\alias{when}
\alias{then}
\title{Step}
\usage{
given(description, implementation)

when(description, implementation)

then(description, implementation)
}
\arguments{
\item{description}{A description of the step.}

\item{implementation}{A function that will be run when the step is executed.}
}
\value{
A function of class \code{step}, invisibly. Function should be called for side effects.
}
\description{
The implementation of Cucumber steps.
Make sure the description is unique for each step.
}
\details{
The implementation function should always have the last parameter named \code{context}.
It holds the environment where state is stored.

Named arguments that precede \code{context} are considered parameters.

If a step has a description \code{"I have {int} cucumbers in my basket"} then the implementation
function should be a \code{function(n_cucumbers, context)}. The \code{{int}} value will be passed to
\code{n_cucumbers}, this parameter can have any name.

If a table or a docstring is passed to a step, it will be passed as an argument next after inline parameters
and before \code{context}. See \code{inst/examples/table} how write implemntation that uses tables
or docstrings.
}
